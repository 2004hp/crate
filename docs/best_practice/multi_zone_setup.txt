.. _multi_zone_setup:

================
Multi Zone Setup
================

We at Crate.IO recommend to run all the nodes of your cluster inside the same physical space
(aka data center) to minimise network latency and maximise speed between the nodes. These factors
can have significant impact on the performance of your Crate cluster.

One reason is that replicas are written synchronously making a write task wait for the replicas
to be written probably somewhere in a data center hundreds of miles away leading to not negligible
latency and causing the cluster to slow down.

However, in certain scenarios it is wanted or even necessary to run a cluster across multiple
data centers or availabiliy zones. Let's call them just zones for now on.

For such a setup you want your Crate cluster to fulfil the following 3 requirements:

Requirements
============

1. When inserting data, you want your data to be replicated in a way that you have at least
   one full replica inside each zone.

2. If a zone becomes unavailable all data still needs to be fully available.

3. When querying data, you want all the data to be collected only from shards that are inside
   the same zone as the initial request.


To achieve these prerequisites, you will need to make use of **shard allocation awareness**. The following
guidelines will help you through that process. If you are new to setting up a multi-node Crate
cluster you should read the best practice of :doc:`multi_node_setup` first.


Assigning Tags
==============

First of all we will need to assign a tag to our nodes with of the zone they are in. This is required
to enable shard allocation awareness later on.

It is possible to assign arbitrary tags to nodes using the ``crate.yaml`` or ``-D`` option on
startup. If you are not familiar with how to set please refer to the :doc:`../configuration`
section of the documentation.

Note that tags and the following settings cannot be changed at runtime and need to be set on startup.

This way you can add a ``zone`` tag to your node. In the ``crate.yaml`` it looks like the following::

  node.zone: us-east-1

Your node is tagged with ``zone`` with the value ``us-east-1``, which is
the name of the availabiliy zone of the a cloud computing provider.


Allocation Awareness
====================

Now tags can be set as attributes for the shard allocation awareness. We use the tag
``zone`` that we just assigned to the node as an attribute::

  cluster.routing.allocation.awareness.attributes: zone

This means that Crate will try to allocate shards and its replicas according to the ``zone`` tags,
so that a shard and its replica are not on a node with the same ``zone`` value.

Let's add a second and a third node in a different zone (``us-west-1``) and tag them accordingly.

::

  node.zone: us-west-1
  cluster.routing.allocation.awareness.attributes: zone

::

  node.zone: us-west-1
  cluster.routing.allocation.awareness.attributes: zone

When started we create a table with 6 shards and 1 replica. The 6 shards will be distributed
evenly across the nodes (2 shards on each node) and the replicas are allocated on nodes with a
different ``zone`` value that its primary shard. If that is not entirely possible
(e.g. ``num replicas > num zones - 1``) Crate still allocates the replicas even on nodes with the same
``zone`` value in order to avoid unassigned shards.

*Allocation awareness* does only mean that Crate tries to conform to the awareness attributes, however,
to avoid such allocations you can force the awareness.


Force Awareness
===============

To fulfil the 3rd prerequisite it is necessary that when you do a query
on a node with a certain ``zone`` value it must execute the request on shards that are allocated
on nodes with the same ``zone`` value as the node that received the query.

This requires that we know the number of different values of the ``zone`` attribute and
so we can force awareness on nodes.

You can force awareness an certain attributes, in our example, on the ``zone``::

  cluster.routing.allocation.awareness.force.zone.values: us-east-1,us-west-1

When set, never more replicas than needed are allocated on a specific group of nodes. For example,
you have 2 nodes with ``zone`` set to ``us-east-1`` and create a table with 8 shards and 1 replica,
only 8 primary shards will be allocated and the 8 replica shards will be left unassigned. Only when you add a
new node with ``zone`` set to ``us-west-1`` the replica shards will be allocated.


Now, keeping the settings and their mechanism in mind, you should be able to setup a cluster
that spans across multiple zones and fulfils the 3 requirements from above. However, be also
aware of the drawbacks such a setup can have.
