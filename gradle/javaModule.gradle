apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'findbugs'
apply plugin: 'pmd'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

compileJava {
    options.warnings = true
    options.deprecation = true
}

sourceCompatibility = "8"
targetCompatibility = "8"

if (project.hasProperty('testLogging')) {
    // Used to enable logging for tests
    test {
        testLogging.showStandardStreams = true
    }
}

forbiddenApisMain {
    bundledSignatures = ['jdk-unsafe', 'jdk-deprecated']
    signaturesFiles = files("$rootDir/gradle/forbidden-signatures.txt")

    if (['app', 'sql', 'blob', 'udc'].contains(it.project.name)) {
        signaturesFiles += files("$rootDir/gradle/es5-signatures.txt")
    }

    ignoreFailures = false
}

findbugs {
    excludeFilter = file("$rootDir/gradle/findBugs-excludeFilter.xml")
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled true
        html.enabled false
    }
}

pmd {
    consoleOutput = true
    if (project.hasProperty('pmdFull')) {
        ignoreFailures = true
        consoleOutput = false
        ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-controversial',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-logging-jakarta-commons',
            'java-logging-java',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
        ]
    } else {
        ignoreFailures = false
        consoleOutput = true
        ruleSetFiles = files("$rootDir/gradle/pmd/customrulesset.xml")
        ruleSets = []
    }
}
/*
 * Licensed to Crate.io Inc. (Crate) under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.  Crate licenses this file to
 * you under the Apache License, Version 2.0 (the "License");  you may not
 * use this file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * However, to use any modules in this file marked as "Enterprise Features",
 * Crate must have given you permission to enable and use such Enterprise
 * Features and you must have a valid Enterprise or Subscription Agreement
 * with Crate.  If you enable or use the Enterprise Features, you represent
 * and warrant that you have a valid Enterprise or Subscription Agreement
 * with Crate.  Your use of the Enterprise Features if governed by the terms
 * and conditions of your Enterprise or Subscription Agreement with Crate.
 */

// Required if ignoreFailures = true
[pmdMain,pmdTest]*.ignoreFailures = project.pmd.ignoreFailures

tasks.withType(Pmd) {
    pmdClasspath += files("$rootDir/gradle/pmd")
}

jmh {
    resultFormat = 'JSON'
    zip64 = true
    jmhVersion = '1.17.4'
}

test {
    // by default `-D` arguments are "caught" in the gradle process
    // and not passed-through to the test process.
    // this enables test options like '-Dtests.iters=20'

    System.properties.each { k, v ->
        if (k.startsWith('tests.')) {
            systemProperty k, v
        }
    }
}
