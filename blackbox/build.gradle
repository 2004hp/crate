/*
 * Licensed to Crate.io Inc. (Crate) under one or more contributor license
 * agreements.  See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.  Crate licenses this file to
 * you under the Apache License, Version 2.0 (the "License");  you may not
 * use this file except in compliance with the License.  You may obtain a
 * copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * However, to use any modules in this file marked as "Enterprise Features",
 * Crate must have given you permission to enable and use such Enterprise
 * Features and you must have a valid Enterprise or Subscription Agreement
 * with Crate.  If you enable or use the Enterprise Features, you represent
 * and warrant that you have a valid Enterprise or Subscription Agreement
 * with Crate.  Your use of the Enterprise Features if governed by the terms
 * and conditions of your Enterprise or Subscription Agreement with Crate.
 */

def crateDist = file("$projectDir/tmp/crate/")

apply plugin: 'base'

evaluationDependsOn(':app')
evaluationDependsOn(':es-repository-hdfs')

task bootstrap(type: Exec) {
    inputs.file "$projectDir/bootstrap.sh"
    outputs.dir "$projectDir/.venv"

    commandLine 'sh', "$projectDir/bootstrap.sh"
}

task unpackDistTar(dependsOn: [project(':app').distTar]) {
    doLast {
        copy {
            includeEmptyDirs = false
            from(tarTree(project(':app').distTar.archivePath)) {
                eachFile { details ->
                    details.path =
                            details.path.substring(details.relativePath.segments[0].length())
                }
            }
            into crateDist
        }
    }
}

task lessLogging(dependsOn: unpackDistTar) {
    doLast {
        def file = new File("$projectDir/tmp/crate/config/logging.yml")
        file.write(file.text.replaceAll('rootLogger: INFO', 'rootLogger: WARN'))
    }
}

task ignoreDiskThreshold(dependsOn: unpackDistTar) {
    doLast {
        def file = new File("$projectDir/tmp/crate/config/crate.yml")
        file.write(file.text.replaceAll(
                '# cluster.routing.allocation.disk.threshold_enabled: true',
                'cluster.routing.allocation.disk.threshold_enabled: false')
        )
    }
}

task hdfsTest(type: Exec) {
    commandLine "$projectDir/bin/hdfs-test"
}

task sigarTest(type: Exec) {
    commandLine "$projectDir/bin/sigar-test"
}

task itest(type: Exec) {
    commandLine "$projectDir/bin/test", '-1', '-t', '!process_test'
}

task gtest(type: Exec) {
    commandLine "$projectDir/bin/test", '-1', '-t', 'process_test'
}

task logicTest(type: Exec) {
    commandLine "$projectDir/bin/logic-test"
}

task buildDocs(type: Exec, dependsOn: bootstrap) {
    commandLine "$projectDir/bin/sphinx"
}


hdfsTest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold, project(':es-repository-hdfs').distZipHadoop2)
sigarTest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold)
itest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold)
gtest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold)
logicTest.dependsOn(unpackDistTar, bootstrap, lessLogging, ignoreDiskThreshold)

task cleanDocs {
    doLast {
        FileCollection toDelete = files(
                crateDist,
                "$projectDir/docs/out/text",
                "$projectDir/docs/out/html",
                "$projectDir/docs/clients/out/text",
                "$projectDir/docs/clients/out/html"
        )
        toDelete.each {
            File file -> delete file
        }
    }
}
clean.dependsOn([cleanDocs, cleanBootstrap])
